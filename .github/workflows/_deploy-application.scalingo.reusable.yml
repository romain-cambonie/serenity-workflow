name: Reusable NodeJS Application Scalingo Deployer Workflow

on:
  workflow_call:
    inputs:
      application-base-name:
        required: true
        type: string
      application-enviroment-name:
        required: true
        type: string
      scalingo-remote-domain-url:
        required: false
        type: string
        default: 'git@ssh.osc-fr1.scalingo.com'
      scalingo-ssh-host-domain:
        required: false
        type: string
        default: 'ssh.osc-fr1.scalingo.com'

    secrets:
      SCALINGO_API_TOKEN:
        required: true

jobs:
  create-app-and-environment:
    runs-on: ubuntu-latest
    container:
      image: rcambonie/scalingo-cli
    outputs:
      deployer-private-ssh-key: ${{ steps.deployer-private-ssh-key.outputs.private-key }}
    steps:
      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

      - name: Create the application with its specific environment if it does not exist
        run: scalingo create ${{ inputs.application-base-name }} --remote ${{ inputs.application-enviroment-name }}
        continue-on-error: true

      - name: Generate transient ssh-keys then add the public key to the logged account for deployment
        run: |
          mkdir -p /home/.ssh
          ssh-keygen -q -t rsa -N '' -f /home/.ssh/id_rsa
          scalingo keys-add ${{ inputs.application-base-name }}-${{ inputs.application-enviroment-name }} /home/.ssh/id_rsa.pub

      - name: Set the generate ssh private key as an output, handling the set-output truncate multiline string behaviours (ref:https://github.community/t/set-output-truncates-multiline-strings/16852)
        id: deployer-private-ssh-key
        run: |
          PRIVATE_KEY_AS_MULTILINE=$(cat /home/.ssh/id_rsa)
          PRIVATE_KEY_AS_SINGLELINE="${PRIVATE_KEY_AS_MULTILINE//'%'/'%25'}"
          PRIVATE_KEY_AS_SINGLELINE="${PRIVATE_KEY_AS_SINGLELINE//$'\n'/'%0A'}"
          PRIVATE_KEY_AS_SINGLELINE="${PRIVATE_KEY_AS_SINGLELINE//$'\r'/'%0D'}"
          echo "::set-output name=private-key::$PRIVATE_KEY_AS_SINGLELINE"

  deploy-to-target-environment:
    runs-on: ubuntu-latest
    needs: create-app-and-environment
    steps:
      - name: Retrieve project files for current branch
        uses: actions/checkout@v3
      - name: Initialise a local git repository for deployment (a scalingo deployment is a push to their remote)
        run: |
          rm -rf .git
          git config --global init.defaultBranch master
          git config --global user.email dummy@email.fr
          git config --global user.name ScalingoDeployer
          git init .
          git add .
          git remote add ${{ inputs.application-enviroment-name }} ${{ inputs.scalingo-remote-domain-url }}:${{ inputs.application-base-name }}.git
          git commit -m "Release bundle"

      - name: Set up ssh authentification to scalingo by setting the private key and known_hosts file
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ needs.create-app-and-environment.outputs.deployer-private-ssh-key }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ssh.osc-fr1.scalingo.com >> ~/.ssh/known_hosts

      - name: Push to deploy
        run: |
          git push ${{ inputs.application-enviroment-name }}

  cleanup-deploy-keys:
    needs: deploy-to-target-environment
    runs-on: ubuntu-latest
    container:
      image: rcambonie/scalingo-cli
    steps:
      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

      - name: Remove the transient ssh-key from logged profile
        run: scalingo keys-remove ${{ inputs.application-base-name }}-${{ inputs.application-enviroment-name }}
        continue-on-error: true
